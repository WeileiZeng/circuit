%Feb 10 2019, Weilei Zeng, modified from convolutional/simualtionRepeatCircuit.m
%this file convert .mtx to matlab data file (.mat)

%add path for necessary tool files
addpath('../../matlab/mmio/')
addpath('../../convolutional/')

%define the code
repeat = 9;%9 for GA, 7 for GI, both 24 qubits
           %code='code1';
%folder = ['data/trellis/',code];
folder = ['../../convolutional/data/trellis/',code];

% get P and trellis from file
[P,strip,Ptransfer,Qtransfer,numInputSymbols,weightP,trellisGF4Strip]...
    = getSavedTrellis(repeat,folder);


%parameters for the data; get from shell
%set_max=19; %total number of set of errors
%error_folder_big='~/working/circuit/quantumsimulator/error/GA_run1';


%convert .mtx into .mat in each subfolder
parfor i_set=1:set_max

    % get error probabilities pms and save into  .mat file
    error_folder=[error_folder_big,'/set',num2str(i_set)];
    error_filename_prefix=[code,'repeat',num2str(repeat)];
    prob_mat_filename=[error_folder,'/',error_filename_prefix,'prob_mat.mtx'];
    prob_mat=mmread(prob_mat_filename);
    %prob_mat=mmread([error_folder,'/',error_filename_prefix,'prob_mat.mtx']);
    pms=full( prob_mat(:,2)' );
    save_pms([error_folder,'/',error_filename_prefix,'prob_mat.mat'],pms);

    %    convert error and syndrome files, and save both with pq into ont .mat file
    for pm=pms
        
        filename_prefix=[error_folder,'/',error_filename_prefix,'p',num2str(pm,"%.6f")];
        [errorMat,syndromeMatCircuit]=get_error_circuit(numInputSymbols,Qtransfer,filename_prefix);
        %pq=sum(sum(errorMat))/size(errorMat,1)/sum(1-Qtransfer)/sum(1-Qtransfer); %average qubit error rate from the data
        %pq=sum(sum(errorMat))/size(errorMat,1)/sum(1-Qtransfer)/sum(1-Qtransfer); %average qubit error rate from the data
        %pq=sum((sum(ceil( errorMat/4 ) ).*(1-Qtransfer))/size(errorMat,1))/n;
        n=sum(1-Qtransfer);%total number of qubits, the same as the one find below
        pq=sum( sum( ceil(errorMat/4) ) /size(errorMat,1))/n;
        
        filename_mat=[filename_prefix,'.mat'];
        save_error(filename_mat,pq,errorMat,syndromeMatCircuit)
        %        disp( ['got data for pm = ',num2str(pm),', i_set = ',num2str(i_set) ]);
    end
    disp( ['got data for i_set = ',num2str(i_set) ]);
end

%now collect all .mat files in subfolder into one file in parent folder

%move pms file; by read and save pms file
error_folder=[error_folder_big,'/set',num2str(1)];
error_filename_prefix=[code,'repeat',num2str(repeat)];
prob_mat_filename=[error_folder,'/',error_filename_prefix,'prob_mat.mtx'];
prob_mat=mmread(prob_mat_filename);
pms=full( prob_mat(:,2)' );
save_pms([error_folder_big,'/',error_filename_prefix,'prob_mat.mat'],pms);

%read parameters for the big file
pm=pms(1);
filename_prefix=[error_folder,'/',error_filename_prefix,'p',num2str(pm,"%.6f")];
filename_mat=[filename_prefix,'.mat'];
[pq,errorMat,syndromeMatCircuit]=load_error(filename_mat);
[t nm]=size(errorMat); %t is number of errors in this file
m=size(syndromeMatCircuit,2); %number of syndrome bits
n=nm-m; %number of qubits
    


%collect all mat files into one file and save it in parent folder
for pm=pms
    errorMatBig=zeros(set_max*t,nm);
    syndromeMatCircuitBig=zeros(set_max*t,m);
    pqs=zeros(1,set_max);
    for i_set = 1:set_max
        error_folder=[error_folder_big,'/set',num2str(i_set)];
        filename_prefix=[error_folder,'/',error_filename_prefix,'p',num2str(pm,"%.6f")];
        filename_mat=[filename_prefix,'.mat'];
        [pq,errorMat,syndromeMatCircuit]=load_error(filename_mat);
        row_begin=(i_set-1)*t;
        errorMatBig(row_begin+1:row_begin+t,:)=errorMat;
        syndromeMatCircuitBig(row_begin+1:row_begin+t,:)=syndromeMatCircuit;
        pqs(i_set)=pq;
    end
    pq=sum(pqs)/set_max;
    filename_prefix=[error_folder_big,'/',error_filename_prefix,'p',num2str(pm,"%.6f")];
    filename_mat=[filename_prefix,'.mat'];
    save_error(filename_mat,pq,errorMatBig,syndromeMatCircuitBig)
end


disp(['mtx2mat.m:  finish converting data in ',error_folder_big])




function     save_pms(pms_filename,pms)
    save(pms_filename,'pms');
end
function save_error(filename_mat,pq,errorMat,syndromeMatCircuit)
%    errorMat
    save(filename_mat,'pq','errorMat','syndromeMatCircuit','-v7.3');
end
function [pq,errorMat,syndromeMatCircuit] = load_error(filename_mat)
    load(filename_mat,'pq','errorMat','syndromeMatCircuit');
end


function [errorMat,syndromeMat]=get_error_circuit(numInputSymbols,Qtransfer,filename_prefix)
%for GA code, the syndrom is for (G;AG) not (G I;0 A I), need conversion.
%get error generated by the cpp program for circuit model
%errorMat save qubit errors in the form of numInputSymbols
%syndrome error is not saved
%syndrome is saved in syndromeMatCircuit

%  addpath('~/working/matlab/mmio/')              %add path for mmio %already added in the beginning of this file
% The readin gpart takes half time of this function
    errorFile   =[filename_prefix,'error.mtx'];
    syndromeFile=[filename_prefix,'syndrome.mtx'];
    %  errorFile   =[folder,'/code1repeat3p0.001000error.mtx'];
    %  syndromeFile=[folder,'/code1repeat3p0.001000syndrome.mtx'];
    errorMatCircuit = mmread(errorFile);
    syndromeMatCircuit=mmread(syndromeFile);

    t=size(errorMatCircuit,1);
    nm=size(Qtransfer,2);
    m=sum(Qtransfer);                              %number of checks
    n=nm-m;                                        %number of qubits

    %combine X and Z errors, binary vector --> GF4 vector. extra zero positions are removed
    %    errorMatCircuit=plusGF4vec(errorMatCircuit(:,1:n),2*errorMatCircuit(:,1+end/2:n+1+end/2));
    %    errorMatCircuit=plusGF4vec(errorMatCircuit(:,1:n),2*errorMatCircuit(:,1+end/2:n+end/2));%Feb 14 weilei
    errorMatCircuit=plusGF4vec(2*errorMatCircuit(:,1:n),errorMatCircuit(:,1+end/2:n+end/2));%Feb 17 weilei, see mtx2mat.m


    syndromeMatCircuit=full(    syndromeMatCircuit);
    syndromeMatCircuit=    syndromeMatCircuit(:,1:m);
    errorMat=zeros(t,nm);                           %save error in the form of numInputSymbols.

    [temp,order]=sort(numInputSymbols); %temp is in increasing order,
                                        %temp = [2 2 .... 2 4 ... 4]
                                        %order=[[indexes of measuring bits],[indexes of qubits]]
    errorMat(:,order((m+1):end))=errorMatCircuit(:,:);  %map qubit errors
    syndromeMat=full(syndromeMatCircuit);
    %    toc
end






    

